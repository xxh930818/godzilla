{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoxiaohui/Work/godzilla/src/components/Upload/upload.tsx\";\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport UploadList from './uploadList';\nimport Dragger from './dragger';\nexport const Upload = props => {\n  const {\n    action,\n    defaultFileList,\n    beforeUpload,\n    onProgress,\n    onSuccess,\n    onError,\n    onChange,\n    onRemove,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n    drag\n  } = props;\n  const fileInput = useRef(null);\n  const [fileList, setFileList] = useState(defaultFileList || []);\n\n  const updateFileList = (updateFile, updateObj) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return { ...file,\n            ...updateObj\n          };\n        } else {\n          return file;\n        }\n      });\n    });\n  };\n\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click();\n    }\n  };\n\n  const handleFileChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n  };\n\n  const handleRemove = file => {\n    setFileList(prevList => {\n      return prevList.filter(item => item.uid !== file.uid);\n    });\n\n    if (onRemove) {\n      onRemove(file);\n    }\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file);\n      } else {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(processedFile => {\n            post(processedFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      }\n    });\n  };\n\n  const post = file => {\n    let _file = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    }; //setFileList([_file, ...fileList])\n\n    setFileList(prevList => {\n      return [_file, ...prevList];\n    });\n    const formData = new FormData();\n    formData.append(name || 'file', file);\n\n    if (data) {\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key]);\n      });\n    }\n\n    axios.post(action, formData, {\n      headers: { ...headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials,\n      onUploadProgress: e => {\n        let percentage = Math.round(e.loaded * 100 / e.total) || 0;\n\n        if (percentage < 100) {\n          updateFileList(_file, {\n            percent: percentage,\n            status: 'uploading'\n          });\n\n          if (onProgress) {\n            onProgress(percentage, file);\n          }\n        }\n      }\n    }).then(resp => {\n      updateFileList(_file, {\n        status: 'success',\n        response: resp.data\n      });\n\n      if (onSuccess) {\n        onSuccess(resp.data, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    }).catch(err => {\n      updateFileList(_file, {\n        status: 'error',\n        error: err\n      });\n\n      if (onError) {\n        onError(err, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viking-upload-component\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viking-upload-input\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, drag ? /*#__PURE__*/React.createElement(Dragger, {\n    onFile: files => {\n      uploadFiles(files);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, children) : children, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"viking-file-input\",\n    style: {\n      display: 'none'\n    },\n    ref: fileInput,\n    onChange: handleFileChange,\n    type: \"file\",\n    accept: accept,\n    multiple: multiple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(UploadList, {\n    fileList: fileList,\n    onRemove: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }));\n};\nUpload.defaultProps = {\n  name: 'file'\n};\nexport default Upload;\n\ntry {\n  // @ts-ignore\n  Upload.displayName = \"Upload\"; // @ts-ignore\n\n  Upload.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"Upload\",\n    \"props\": {\n      \"action\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"action\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"defaultFileList\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"defaultFileList\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"UploadFile[]\"\n        }\n      },\n      \"beforeUpload\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"beforeUpload\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => boolean | Promise<File>\"\n        }\n      },\n      \"onProgress\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onProgress\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(percentage: number, file: File) => void\"\n        }\n      },\n      \"onSuccess\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSuccess\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"onError\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onError\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(err: any, file: File) => void\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => void\"\n        }\n      },\n      \"onRemove\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onRemove\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: UploadFile) => void\"\n        }\n      },\n      \"headers\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"headers\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: any; }\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": {\n          value: \"file\"\n        },\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"data\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"data\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: any; }\"\n        }\n      },\n      \"withCredentials\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"withCredentials\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"accept\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"accept\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"multiple\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"multiple\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"drag\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"drag\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#Upload\"] = {\n      docgenInfo: Upload.__docgenInfo,\n      name: \"Upload\",\n      path: \"src/components/Upload/upload.tsx#Upload\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  upload.displayName = \"upload\"; // @ts-ignore\n\n  upload.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"upload\",\n    \"props\": {\n      \"action\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"action\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"defaultFileList\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"defaultFileList\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"UploadFile[]\"\n        }\n      },\n      \"beforeUpload\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"beforeUpload\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => boolean | Promise<File>\"\n        }\n      },\n      \"onProgress\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onProgress\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(percentage: number, file: File) => void\"\n        }\n      },\n      \"onSuccess\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSuccess\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"onError\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onError\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(err: any, file: File) => void\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => void\"\n        }\n      },\n      \"onRemove\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onRemove\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: UploadFile) => void\"\n        }\n      },\n      \"headers\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"headers\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: any; }\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": {\n          value: \"file\"\n        },\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"data\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"data\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: any; }\"\n        }\n      },\n      \"withCredentials\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"withCredentials\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"accept\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"accept\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"multiple\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"multiple\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"drag\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"drag\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#upload\"] = {\n      docgenInfo: upload.__docgenInfo,\n      name: \"upload\",\n      path: \"src/components/Upload/upload.tsx#upload\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}","map":{"version":3,"sources":["/Users/xiaoxiaohui/Work/godzilla/src/components/Upload/upload.tsx"],"names":["Upload","props","drag","fileInput","useRef","useState","defaultFileList","updateFileList","setFileList","prevList","file","updateFile","updateObj","handleClick","handleFileChange","e","files","uploadFiles","handleRemove","item","onRemove","postFiles","Array","post","result","beforeUpload","processedFile","_file","uid","Date","status","name","size","percent","raw","formData","Object","key","data","axios","headers","onUploadProgress","percentage","Math","onProgress","resp","response","onSuccess","onChange","err","error","onError","display","value","STORYBOOK_REACT_CLASSES","docgenInfo","path","upload"],"mappings":"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","sourcesContent":["import React, { FC, useRef, ChangeEvent, useState } from 'react'\nimport axios from 'axios'\nimport UploadList from './uploadList'\nimport Dragger from './dragger'\nexport type UploadFileStatus = 'ready' | 'uploading' | 'success' | 'error'\nexport interface UploadFile {\n  uid: string;\n  size: number;\n  name: string;\n  status?: UploadFileStatus;\n  percent?: number;\n  raw?: File;\n  response?: any;\n  error?: any;\n}\nexport interface UploadProps {\n  action: string;\n  defaultFileList?: UploadFile[];\n  beforeUpload? : (file: File) => boolean | Promise<File>;\n  onProgress?: (percentage: number, file: File) => void;\n  onSuccess?: (data: any, file: File) => void;\n  onError?: (err: any, file: File) => void;\n  onChange?: (file: File) => void;\n  onRemove?: (file: UploadFile) => void;\n  headers?: {[key: string]: any };\n  name?: string;\n  data?: {[key: string]: any };\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  drag?: boolean;\n}\n\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    action,\n    defaultFileList,\n    beforeUpload,\n    onProgress,\n    onSuccess,\n    onError,\n    onChange,\n    onRemove,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n    drag,\n  } = props\n  const fileInput = useRef<HTMLInputElement>(null)\n  const [ fileList, setFileList ] = useState<UploadFile[]>(defaultFileList || [])\n  const updateFileList = (updateFile: UploadFile, updateObj: Partial<UploadFile>) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return { ...file, ...updateObj }\n        } else {\n          return file\n        }\n      })\n    })\n  }\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click()\n    }\n  }\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if(!files) {\n      return\n    }\n    uploadFiles(files)\n    if (fileInput.current) {\n      fileInput.current.value = ''\n    }\n  }\n  const handleRemove = (file: UploadFile) => {\n    setFileList((prevList) => {\n      return prevList.filter(item => item.uid !== file.uid)\n    })\n    if (onRemove) {\n      onRemove(file)\n    }\n  }\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file)\n      } else {\n        const result = beforeUpload(file)\n        if (result && result instanceof Promise) {\n          result.then(processedFile => {\n            post(processedFile)\n          })\n        } else if (result !== false) {\n          post(file)\n        }\n      }\n    })\n  }\n  const post = (file: File) => {\n    let _file: UploadFile = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    }\n    //setFileList([_file, ...fileList])\n    setFileList(prevList => {\n      return [_file, ...prevList]\n    })\n    const formData = new FormData()\n    formData.append(name || 'file', file)\n    if (data) {\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key])\n      })\n    } \n    axios.post(action, formData, {\n      headers: {\n        ...headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials,\n      onUploadProgress: (e) => {\n        let percentage = Math.round((e.loaded * 100) / e.total) || 0;\n        if (percentage < 100) {\n          updateFileList(_file, { percent: percentage, status: 'uploading'})\n          if (onProgress) {\n            onProgress(percentage, file)\n          }\n        }\n      }\n    }).then(resp => {\n      updateFileList(_file, {status: 'success', response: resp.data})\n      if (onSuccess) {\n        onSuccess(resp.data, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n    }).catch(err => {\n      updateFileList(_file, { status: 'error', error: err})\n      if (onError) {\n        onError(err, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n    })\n  }\n\n  return (\n    <div \n      className=\"viking-upload-component\"\n    >\n      <div className=\"viking-upload-input\"\n        style={{display: 'inline-block'}}\n        onClick={handleClick}>\n          {drag ? \n            <Dragger onFile={(files) => {uploadFiles(files)}}>\n              {children}\n            </Dragger>:\n            children\n          }\n        <input\n          className=\"viking-file-input\"\n          style={{display: 'none'}}\n          ref={fileInput}\n          onChange={handleFileChange}\n          type=\"file\"\n          accept={accept}\n          multiple={multiple}\n        />\n      </div>\n\n      <UploadList \n        fileList={fileList}\n        onRemove={handleRemove}\n      />\n    </div>\n  )\n}\n\nUpload.defaultProps = {\n  name: 'file'\n}\nexport default Upload;try {\n    // @ts-ignore\n    Upload.displayName = \"Upload\";\n    // @ts-ignore\n    Upload.__docgenInfo = { \"description\": \"\", \"displayName\": \"Upload\", \"props\": { \"action\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"action\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"defaultFileList\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultFileList\", \"required\": false, \"type\": { \"name\": \"UploadFile[]\" } }, \"beforeUpload\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"beforeUpload\", \"required\": false, \"type\": { \"name\": \"(file: File) => boolean | Promise<File>\" } }, \"onProgress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onProgress\", \"required\": false, \"type\": { \"name\": \"(percentage: number, file: File) => void\" } }, \"onSuccess\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSuccess\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"onError\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onError\", \"required\": false, \"type\": { \"name\": \"(err: any, file: File) => void\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(file: File) => void\" } }, \"onRemove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onRemove\", \"required\": false, \"type\": { \"name\": \"(file: UploadFile) => void\" } }, \"headers\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headers\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: any; }\" } }, \"name\": { \"defaultValue\": { value: \"file\" }, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"data\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: any; }\" } }, \"withCredentials\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"withCredentials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accept\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"accept\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"multiple\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"multiple\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"drag\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"drag\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#Upload\"] = { docgenInfo: Upload.__docgenInfo, name: \"Upload\", path: \"src/components/Upload/upload.tsx#Upload\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    upload.displayName = \"upload\";\n    // @ts-ignore\n    upload.__docgenInfo = { \"description\": \"\", \"displayName\": \"upload\", \"props\": { \"action\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"action\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"defaultFileList\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultFileList\", \"required\": false, \"type\": { \"name\": \"UploadFile[]\" } }, \"beforeUpload\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"beforeUpload\", \"required\": false, \"type\": { \"name\": \"(file: File) => boolean | Promise<File>\" } }, \"onProgress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onProgress\", \"required\": false, \"type\": { \"name\": \"(percentage: number, file: File) => void\" } }, \"onSuccess\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSuccess\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"onError\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onError\", \"required\": false, \"type\": { \"name\": \"(err: any, file: File) => void\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(file: File) => void\" } }, \"onRemove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onRemove\", \"required\": false, \"type\": { \"name\": \"(file: UploadFile) => void\" } }, \"headers\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headers\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: any; }\" } }, \"name\": { \"defaultValue\": { value: \"file\" }, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"data\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: any; }\" } }, \"withCredentials\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"withCredentials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accept\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"accept\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"multiple\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"multiple\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"drag\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"drag\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#upload\"] = { docgenInfo: upload.__docgenInfo, name: \"upload\", path: \"src/components/Upload/upload.tsx#upload\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}